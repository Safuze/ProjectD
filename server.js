/* eslint-disable no-undef */
import express from 'express';
import mysql from 'mysql2/promise';
import bcrypt from 'bcrypt';
import cors from 'cors';
import { Client } from 'ssh2';

const app = express();
const port = 3001;

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è SSH
const sshConfig = {
  host: '95.163.221.170',
  port: 22,
  username: 'root',
  password: 'j72km7tb1qUrpYqx'
};

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö 
const dbConfig = {
  host: '95.163.221.170',
  user: 'admin',
  password: 'FtyobF44#!',
  database: 'my_app_database',
  waitForConnections: true,
  connectionLimit: 10,
  queueLimit: 0
};

const pool = mysql.createPool(dbConfig);
const sshClient = new Client();

app.use(cors({
    origin: 'http://localhost:5173', // –∏–ª–∏ –≤–∞—à –∫–ª–∏–µ–Ω—Ç—Å–∫–∏–π URL
    methods: ['GET', 'POST', 'OPTIONS'],
    allowedHeaders: ['Content-Type', 'Authorization'],
    credentials: true
  }));

app.use(express.json());

// SSH –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
function connectToServer() {
  return new Promise((resolve, reject) => {
    sshClient.on('ready', () => {
      console.log('‚úÖ SSH –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
      
      // –í—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–º–∞–Ω–¥—É –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –¥–æ–º–∞—à–Ω–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
      sshClient.exec('ls', (err, stream) => {
        if (err) reject(err);
        
        let output = '';
        stream.on('data', (data) => output += data)
              .on('close', () => {
                console.log('–°–æ–¥–µ—Ä–∂–∏–º–æ–µ –¥–æ–º–∞—à–Ω–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Å–µ—Ä–≤–µ—Ä–∞:\n' + output);
                sshClient.end();
                resolve();
              });
      });
    }).on('error', (err) => {
      console.error('SSH –æ—à–∏–±–∫–∞:', err);
      reject(err);
    }).connect(sshConfig);
  });
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –ë–î
async function testDbConnection() {
  const conn = await pool.getConnection();
  try {
    await conn.ping();
    console.log('‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∞');
  } finally {
    conn.release();
  }
}

// –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã
async function createTable() {
  const conn = await pool.getConnection();
  try {
    await conn.query(`
      CREATE TABLE IF NOT EXISTS user_data (
        id INT AUTO_INCREMENT PRIMARY KEY,
        login VARCHAR(255) NOT NULL UNIQUE,
        email VARCHAR(255) UNIQUE,
        password_hash VARCHAR(255) NOT NULL,
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
      ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4
    `);
    console.log('‚úÖ –¢–∞–±–ª–∏—Ü–∞ user_data –≥–æ—Ç–æ–≤–∞');
  } finally {
    conn.release();
  }
}

// –¢–µ—Å—Ç–æ–≤—ã–π endpoint
app.get('/', (req, res) => {
  res.send(`
    <h1>–°–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç! (–ü–æ—Ä—Ç ${port})</h1>
    <p>–î–æ—Å—Ç—É–ø–Ω—ã–µ endpoints:</p>
    <ul>
      <li><a href="/test">/test</a> - –ü—Ä–æ–≤–µ—Ä–∫–∞ –ë–î</li>
      <li>POST /register - –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è</li>
      <li>POST /login - –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è</li>
    </ul>
  `);
});

// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç—ã –ë–î
app.get('/test', async (req, res) => {
  try {
    const [rows] = await pool.query('SELECT NOW() AS time, 1+1 AS math');
    res.json({ 
      status: 'OK',
      database: rows[0]
    });
  } catch (err) {
    res.status(500).json({ error: err.message });
  }
});

// –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
app.post('/register', async (req, res) => {
  const { login, email, password } = req.body;

  if (!login || !email || !password) {
    return res.status(400).json({ error: '–í—Å–µ –ø–æ–ª—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã' });
  }

  const conn = await pool.getConnection();
  try {
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const [existing] = await conn.query(
      'SELECT id FROM user_data WHERE login = ? OR email = ? LIMIT 1',
      [login, email]
    );

    if (existing.length > 0) {
      return res.status(409).json({ error: '–õ–æ–≥–∏–Ω –∏–ª–∏ email —É–∂–µ –∑–∞–Ω—è—Ç—ã' });
    }

    // –•–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä–æ–ª—è
    const hash = await bcrypt.hash(password, 10);

    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const [result] = await conn.query(
      'INSERT INTO user_data (login, email, password_hash) VALUES (?, ?, ?)',
      [login, email, hash]
    );

    res.status(201).json({ 
      success: true,
      userId: result.insertId 
    });
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:', err);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  } finally {
    conn.release();
  }
});

// –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
app.post('/login', async (req, res) => {
  const { login, password } = req.body;

  if (!login || !password) {
    return res.status(400).json({ error: '–õ–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã' });
  }

  const conn = await pool.getConnection();
  try {
    // –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const [users] = await conn.query(
      'SELECT * FROM user_data WHERE login = ? LIMIT 1',
      [login]
    );

    if (users.length === 0) {
      return res.status(401).json({ error: '–ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å' });
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä–æ–ª—è
    const user = users[0];
    const match = await bcrypt.compare(password, user.password_hash);

    if (!match) {
      return res.status(401).json({ error: '–ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å' });
    }

    // –£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
    res.json({ 
      success: true,
      user: {
        id: user.id,
        login: user.login,
        email: user.email
      }
    });
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:', err);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  } finally {
    conn.release();
  }
});

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
async function start() {
  await testDbConnection();
  await createTable();

  try {
    await connectToServer();
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É:', err);
  }

  app.listen(port, () => {
    console.log(`üöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω: http://localhost:${port}`);
  });
}

start().catch(err => {
  console.error('–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞:', err);
  process.exit(1);
});
